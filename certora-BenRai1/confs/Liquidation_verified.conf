{
    "files": [
        "certora-BenRai1/harness/LiquidationHarness.sol",
        "src/IonPool.sol",
        "src/oracles/reserve/WstEthReserveOracle.sol",
        "src/oracles/reserve/EthXReserveOracle.sol",
        "src/oracles/reserve/SwEthReserveOracle.sol",
        "certora-BenRai1/helpers/ERC20A.sol",
        "certora-BenRai1/helpers/ERC20B.sol",
        "src/InterestRate.sol",
        "src/YieldOracle.sol"
    ],
    "verify": "LiquidationHarness:certora-BenRai1/specs/Liquidation.spec",
    "loop_iter": "3",
    "parametric_contracts": ["LiquidationHarness"],
    "packages": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts",
    ],
    "assert_autofinder_success": true,
    "prover_args": [
        "-splitParallel true", // good for finding violations
        // "-split false" helps with proving rules
        //"-smt_hashingScheme plainInjectivity",
        //"-s [yices, z3]" 
        //from the video 39:38
    ],
    "link": [
        "LiquidationHarness:POOL=IonPool",
        "LiquidationHarness:UNDERLYING=ERC20A",
        "LiquidationHarness:RESERVE_ORACLE_0=WstEthReserveOracle",
        "LiquidationHarness:RESERVE_ORACLE_1=EthXReserveOracle",
        "LiquidationHarness:RESERVE_ORACLE_2=SwEthReserveOracle",
    ],
    // "smt_timeout": "36000", helps with proving rules
    "optimistic_loop": true,
    "rule_sanity": "basic",
    //coverage_info: "advanced", //check which lines are covered
    "msg": "Liquidation all rules"
    //"rule": ["getRepayAmtIntegraty"]
    }